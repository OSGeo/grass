"""
Name:      i.cca tests
Purpose:   Test correctness of generated outputs

Author:    Maris Nartiss
Copyright: (C) 2023 by Maris Nartiss and the GRASS Development Team
Licence:   This program is free software under the GNU General Public
           License (>=v2). Read the file COPYING that comes with GRASS
           for details.
"""
from grass.script.core import tempname

from grass.gunittest.case import TestCase
from grass.gunittest.main import test


class OutputMatchTest(TestCase):
    """
    Compare values to output generated by pre-7.0 version of the module.
    Comparison values were obtained with pre-ccmath rewrite version
    664305e4b8de924c8dfb5385e8bf6c18fbf649be
    """

    @classmethod
    def setUpClass(cls):
        """Ensures expected computational region and generated data"""
        cls.use_temp_region()
        cls.runModule("g.region", raster="lsat7_2000_20")
        cls.group_name = tempname(10)
        cls.subgroup_name = "vis"
        cls.runModule(
            "i.group",
            group=cls.group_name,
            subgroup=cls.subgroup_name,
            input="lsat7_2000_20,lsat7_2000_30,lsat7_2000_40",
        )
        cls.rasters = []
        cls.signatures = []

    @classmethod
    def tearDownClass(cls):
        """Remove the temporary region and generated data"""
        cls.del_temp_region()
        cls.runModule(
            "g.remove", flags="f", type="group", name=cls.group_name, quiet=True
        )
        for r in cls.rasters:
            cls.runModule("g.remove", flags="f", type="raster", name=r, quiet=True)
        for s in cls.signatures:
            cls.runModule("i.signatures", type="sig", remove=s, quiet=True)

    def test_output_values(self):
        """Test correctness of i.cca output"""
        sig_name = tempname(10)
        self.assertModule(
            "i.cluster",
            classes=4,
            group=self.group_name,
            subgroup=self.subgroup_name,
            signaturefile=sig_name,
            quiet=True,
        )
        self.signatures.append(sig_name)
        out_prefix = tempname(10)
        self.assertModule(
            "i.cca",
            group=self.group_name,
            subgroup=self.subgroup_name,
            signature=sig_name,
            output=out_prefix,
            quiet=True,
        )
        self.assertRasterExists(f"{out_prefix}.1")
        self.rasters.append(f"{out_prefix}.1")
        self.assertRasterExists(f"{out_prefix}.2")
        self.rasters.append(f"{out_prefix}.2")
        self.assertRasterExists(f"{out_prefix}.3")
        self.rasters.append(f"{out_prefix}.3")
        self.assertRasterMinMax(
            map=f"{out_prefix}.1", refmin=-10, refmax=9, msg="Wrong calculated value"
        )
        self.assertRasterMinMax(
            map=f"{out_prefix}.2", refmin=-34, refmax=-3, msg="Wrong calculated value"
        )
        self.assertRasterMinMax(
            map=f"{out_prefix}.3", refmin=-24, refmax=5, msg="Wrong calculated value"
        )


if __name__ == "__main__":
    test()
