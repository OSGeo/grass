function(fatal_error file_name)
  #message(STATUS "ENV{PATH}=$ENV{PATH}")
  message(STATUS "ENV{PYTHONPATH}=$ENV{PYTHONPATH}")
  message(STATUS "ENV{GISRC}=$ENV{GISRC}")
  message(STATUS "ENV{GISBASE}=$ENV{GISBASE}")
  if(UNIX)
    message(STATUS "ENV{LD_LIBRARY_PATH}=$ENV{LD_LIBRARY_PATH}")
  endif()

#  message(STATUS "PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}")
 # message(STATUS "PGM_SOURCE_DIR=${PGM_SOURCE_DIR}")
  #message(STATUS "MKHTML_PY=${MKHTML_PY}")
  #message(STATUS "PGM_NAME=${PGM_NAME}")
  message(STATUS "G_TARGET_FILE=${G_TARGET_FILE}")
  #message(STATUS "OUT_HTML_FILE=${OUT_HTML_FILE}")
  #message(STATUS "IS_PYTHON_SCRIPT=${IS_PYTHON_SCRIPT}")

  execute_process(COMMAND ${CMAKE_COMMAND} -E remove ${G_TARGET_FILE})
  message(SEND_ERROR "Failed to create ${file_name}")

endfunction()

if(NOT HTML_FILE)
  message( "Dont know to build docs for ${PGM_NAME}")
  file(INSTALL ${G_TARGET_FILE} DESTINATION ${OUTPUT_DIR})
  return()
endif()

set(GISBASE "@GISBASE@")
set(TOP_DIR "@CMAKE_SOURCE_DIR@")
set(BINARY_DIR "@CMAKE_BINARY_DIR@")
set(PYTHON_EXECUTABLE "@PYTHON_EXECUTABLE@")
file(TO_NATIVE_PATH "${TOP_DIR}" MODULE_TOPDIR )
file(TO_NATIVE_PATH "${GISBASE}" GIS_BASE_DIR )
file(TO_NATIVE_PATH "${GIS_BASE_DIR}/etc/config/rc" GISRC)
file(TO_NATIVE_PATH "${BINARY_DIR}/bin" BIN_DIR)
file(TO_NATIVE_PATH "${GIS_BASE_DIR}/bin" GIS_BIN_DIR)
file(TO_NATIVE_PATH "${GIS_BASE_DIR}/scripts" SCRIPTS_DIR)
file(TO_NATIVE_PATH "${GISBASE}/gui/wxpython" WXPYTHON_DIR)
file(TO_NATIVE_PATH "${GISBASE}/etc/python" PYTHON_DIR)
file(TO_NATIVE_PATH "${BINARY_DIR}/TEMP" TEMP_DIR)

if(WIN32)
  set(P_SEP ";")
else()
  set(P_SEP ":")
endif()



set(ENV{PATH} "${TEMP_DIR}${P_SEP}${BIN_DIR}${P_SEP}$ENV{PATH}")


set(ENV{GISBASE} "${GIS_BASE_DIR}")
set(ENV{MODULE_TOPDIR} "${MODULE_TOPDIR}")
set(ENV{GISRC} "${GISRC}")
set(ENV{LC_ALL} C)
set(ENV{LANG} C)
set(ENV{LANGUAGE} C)
if(UNIX)
  set(GRASS_LD_LIBRARY_PATH "${BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}")
  string(REGEX REPLACE "^(.*)\\${P_SEP}$" "\\1" GRASS_LD_LIBRARY_PATH "${GRASS_LD_LIBRARY_PATH}")
  set(ENV{LD_LIBRARY_PATH} ${GRASS_LD_LIBRARY_PATH})
endif()

set(GRASS_PYTHONPATH "${WXPYTHON_DIR}${P_SEP}${PYTHON_DIR}${P_SEP}$ENV{PYTHONPATH}")

string(REGEX REPLACE "^(.*)\\${P_SEP}$" "\\1" GRASS_PYTHONPATH "${GRASS_PYTHONPATH}")
set(ENV{PYTHONPATH} "${GRASS_PYTHONPATH}")

get_filename_component(HTML_FILE_NAME ${HTML_FILE} NAME)
get_filename_component(PGM_SOURCE_DIR ${HTML_FILE} PATH)


string(REPLACE ".html"  "" PGM_NAME2 "${HTML_FILE_NAME}" )
message("PGM_NAME2=${PGM_NAME2}")
message("G_TARGET_FILE2x=${G_TARGET_FILE}")

if(PYTHON_SCRIPT)
if(WIN32)
 file(TO_NATIVE_PATH "${PYTHON_EXECUTABLE}" python_exe)
 file(TO_NATIVE_PATH "${BINARY_DIR}/TEMP" scripts_dir)
 configure_file(${TOP_DIR}/cmake/py_cli.bat.in  ${BINARY_DIR}/TEMP/${PGM_NAME2}.bat @ONLY)
#message("Writing ${BINARY_DIR}/TEMP/${PGM_NAME2} ")
else()
file(COPY ${G_TARGET_FILE} DESTINATION ${BINARY_DIR}/TEMP/
 FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE)

file(RENAME ${BINARY_DIR}/TEMP/${PGM_NAME2}.py ${BINARY_DIR}/TEMP/${PGM_NAME2})

endif() #WIN32
endif() #PYTHON_SCRIPT

string(REPLACE ".html" ".tmp.html" TMP_HTML_NAME ${HTML_FILE_NAME})
set(TMP_HTML_FILE ${PGM_SOURCE_DIR}/${TMP_HTML_NAME})
set(OUT_HTML_FILE ${GISBASE}/docs/html/${HTML_FILE_NAME})
set(MKHTML_PY ${BINARY_DIR}/tools/mkhtml.py)

if(RUN_HTML_DESCR)
message("Running ${PGM_NAME2}${PGM_EXT} --html-description")
  execute_process(
    COMMAND ${PGM_NAME2}${PGM_EXT} "--html-description"
    OUTPUT_FILE ${TMP_HTML_FILE}
    RESULT_VARIABLE html_descr_rv)

  #TODO: print TMP_HTML_FILE contents in case of failure.
  message("html_descr_rv=${html_descr_rv}")
  if(NOT html_descr_rv EQUAL 0)
    fatal_error(${TMP_HTML_FILE})
  endif()

  if(NOT EXISTS ${TMP_HTML_FILE})
    fatal_error(${TMP_HTML_FILE})
  endif()
else()
  message(STATUS "No html-description run for ${PGM_NAME2}")
endif()

message(STATUS "Creating ${OUT_HTML_FILE}")
execute_process(
  COMMAND ${CMAKE_COMMAND} -E chdir ${PGM_SOURCE_DIR} ${PYTHON_EXECUTABLE} ${MKHTML_PY} ${PGM_NAME2}
  OUTPUT_FILE ${OUT_HTML_FILE}
  RESULT_VARIABLE mkhtml_rv)

message("mkhtml_rv=${mkhtml_rv}")
if(NOT mkhtml_rv EQUAL 0)
  fatal_error(${OUT_HTML_FILE})
endif()

file(GLOB IMG_FILES ${PGM_SOURCE_DIR}/*.png  ${PGM_SOURCE_DIR}/*.jpg)
foreach(IMG_FILE ${IMG_FILES})
  file(INSTALL ${IMG_FILE} DESTINATION ${GISBASE}/docs/html)
endforeach()
file(INSTALL ${G_TARGET_FILE} DESTINATION ${OUTPUT_DIR})
file(REMOVE ${TMP_HTML_FILE})
#if( NOT PGM_NAME2 STREQUAL "g.parser")
  #fatal_error(${PGM_NAME2} ${OUT_HTML_FILE})
#  endif()
if(PYTHON_SCRIPT)
if(WIN32)
 configure_file(${TOP_DIR}/cmake/py_cli_install.bat.in  ${OUTPUT_DIR}/${PGM_NAME2}.bat @ONLY)
 else()
 file(INSTALL ${BINARY_DIR}/TEMP/${PGM_NAME2} DESTINATION ${OUTPUT_DIR})
 endif()

 endif()

