set(GISBASE "@GISBASE@")
set(TOP_DIR "@CMAKE_SOURCE_DIR@")
set(BINARY_DIR "@CMAKE_BINARY_DIR@")
set(PYTHON_EXECUTABLE "@PYTHON_EXECUTABLE@")
file(TO_NATIVE_PATH "${TOP_DIR}" MODULE_TOPDIR )
file(TO_NATIVE_PATH "${GISBASE}" GIS_BASE_DIR )
set(ENV{GISBASE} "${GIS_BASE_DIR}")
set(ENV{MODULE_TOPDIR} "${MODULE_TOPDIR}")
file(TO_NATIVE_PATH "${GIS_BASE_DIR}/etc/config/rc" GISRC)
set(ENV{GISRC} "${GISRC}")
set(ENV{LC_ALL} C)
set(ENV{LANG} C)
set(ENV{LANGUAGE} C)

if (WIN32)
  set(P_SEP ";")
else ()
  set(P_SEP ":")
endif()

file(TO_NATIVE_PATH "${BINARY_DIR}/bin" BIN_DIR)
file(TO_NATIVE_PATH "${BINARY_DIR}/scripts" SCRIPTS_DIR)


set(ENV{PATH}  "${BIN_DIR}${P_SEP}${SCRIPTS_DIR}${P_SEP}$ENV{PATH}")

if(UNIX)
	if($ENV{LD_LIBRARY_PATH})
		set(ENV{LD_LIBRARY_PATH} "${BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}")
	else()
	set(ENV{LD_LIBRARY_PATH} "${BINARY_DIR}/lib")
	endif()
endif()

set(IS_PYTHON TRUE)
if(IS_PYTHON)
	file(TO_NATIVE_PATH "${BINARY_DIR}/gui/wxpython" WXPYTHON_DIR)
	file(TO_NATIVE_PATH "${BINARY_DIR}/etc/python" PYTHON_DIR)
	if($ENV{PYTHONPATH})
		set(ENV{PYTHONPATH} "${WXPYTHON_DIR}/gui/wxpython${P_SEP}${PYTHON_DIR}/etc/python${P_SEP}$ENV{PYTHONPATH}")
	else()
		set(ENV{PYTHONPATH} "${WXPYTHON_DIR}/gui/wxpython${P_SEP}${PYTHON_DIR}/etc/python")
	endif()
endif()

get_filename_component(HTML_FILE_NAME ${INPUT_HTML_FILE} NAME)
get_filename_component(PGM_SOURCE_DIR ${INPUT_HTML_FILE} PATH)
get_filename_component(PGM_NAME ${GRASS_PGM} NAME)

string(REPLACE ".html" ".tmp.html" TMP_HTML_NAME ${HTML_FILE_NAME})
set(TMP_HTML_FILE ${PGM_SOURCE_DIR}/${TMP_HTML_NAME})
set(OUT_HTML_FILE ${GISBASE}/docs/html/${HTML_FILE_NAME})
set(MKHTML_PY ${BINARY_DIR}/tools/mkhtml.py)


#message("ENV{PATH}=$ENV{PATH}")
#message("ENV{PYTHONPATH}=$ENV{PYTHONPATH}")
#message("ENV{GISRC}=$ENV{GISRC}")
#message("ENV{GISBASE}=$ENV{GISBASE}")
#message("ENV{VERSION_NUMBER}=@GRASS_VERSION_NUMBER@")
#message("ENV{VERSION_DATE}=@GRASS_VERSION_DATE@")

#message("PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}")
#message("PGM_SOURCE_DIR=${PGM_SOURCE_DIR}")
#message("MKHTML_PY=${MKHTML_PY}")
#message("PGM_NAME=${PGM_NAME}")
#message("OUT_HTML_FILE=${OUT_HTML_FILE}")


message("Creating ${TMP_HTML_FILE}")
execute_process(
	COMMAND ${PGM_NAME} "--html-description"
	OUTPUT_FILE ${TMP_HTML_FILE}
	RESULT_VARIABLE html_descr_rv)

#message("html_descr_rv=${html_descr_rv}")
if(NOT html_descr_rv EQUAL 0)
  execute_process(COMMAND ${CMAKE_COMMAND} -E remove ${GRASS_PGM})
  message(SEND_ERROR "Failed to create ${TMP_HTML_FILE}")
endif()

message("Creating ${OUT_HTML_FILE}")
execute_process(
COMMAND ${CMAKE_COMMAND} -E chdir ${PGM_SOURCE_DIR} ${PYTHON_EXECUTABLE} ${MKHTML_PY} ${PGM_NAME}
OUTPUT_FILE ${OUT_HTML_FILE}
RESULT_VARIABLE mkhtml_rv)

#message("mkhtml_rv=${mkhtml_rv}")
if(NOT mkhtml_rv EQUAL 0)
  execute_process(COMMAND ${CMAKE_COMMAND} -E remove ${GRASS_PGM})
  message(SEND_ERROR "Failed to create ${OUT_HTML_FILE}")
endif()
message("Copy ${GRASS_PGM} to ${OUTPUT_DIR}")
execute_process(
COMMAND ${CMAKE_COMMAND} -E copy ${GRASS_PGM} ${OUTPUT_DIR}
COMMAND ${CMAKE_COMMAND} -E remove ${TMP_HTML_FILE}
RESULT_VARIABLE copy_rv)

#message("copy_rv=${copy_rv}")
if(NOT copy_rv EQUAL 0)
  execute_process(COMMAND ${CMAKE_COMMAND} -E remove ${GRASS_PGM})
  message(SEND_ERROR "Failed to copy ${GRASS_PGM} to ${OUTPUT_DIR}")
endif()
