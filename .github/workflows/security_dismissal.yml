name: Track Dismissed Code Scanning Alerts

on:
  push:
    branches: 
     - main
     - dismissalCheckout   # Trigger only test branch, remember to remove before PRing to grass

jobs:
    get-dismissals-data:
        runs-on: ubuntu-latest  
        permissions: write-all

        steps:
     
     
           - uses: actions/checkout@v4 # Checkout repository code
    
           - name: Install dependencies (if needed for parsing security tool response)
             run: |
                # Add any package installation commands here (e.g., pip install requests)
                  sudo apt-get install jq  # Install jq for parsing JSON
                 
   
           - name: Get Security Alerts
          
             run: |

               #get only dismissed alerts using curl

               curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/ncsu-csc472-spring2024/grass-CI-playground/code-scanning/alerts?state=dismissed > alerts.json
                echo "alerts retrieved successfully!"


              # remember to change the path above before uploading to grass!

         

              #trigger a rerun

           - name: Upload the coding alerts as artifact
             uses: actions/upload-artifact@v4
             with:
              name: workflow-data
              path: alerts.json


# get the repository issues 
           - name: Get Current Issues        
             run: |
              
               curl -L \
               -H "Accept: application/vnd.github+json" \
               -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               https://api.github.com/repos/ncsu-csc472-spring2024/grass-CI-playground/issues > issues.json  
 
               # remember to change the path above before uploading to grass!
               echo "issues retrieved successfully!"
 
               #trigger a rerun
 
           - name: Upload the issues as artifact
             uses: actions/upload-artifact@v4
             with:
                 name: issues-data
                 path: issues.json

    track-dismissals:
     runs-on: ubuntu-latest  
     permissions: write-all
     needs: get-dismissals-data
    
     steps:
                   
     - uses: actions/checkout@v4 # Checkout repository code

     - name: Install dependencies (if needed for parsing security tool response)
       run: |
        # Add any package installation commands here (e.g., pip install requests)
          sudo apt-get install jq  # Install jq for parsing JSON

     - name: Download inssues artifacts
       uses: actions/download-artifact@v4
       with:
         name: issues-data   # Match the name used for upload
       
     - name: Download alerts artifacts
       uses: actions/download-artifact@v4
       with:
         name: workflow-data 

         
     - name: Use downloaded artifact
       run: |
         # Access the downloaded artifact
         #if the discription, prepended with #DISMISSED in alerts.json match the title of an issue, remove from alerts.json
         jq 'reduce inputs as $in (.; if .title == ("#DISMISSED " + $in.description) then empty else . end)' alerts.json issues.json > filtered_alerts.json

         cat filtered_alerts.json

     - name: Filter alerts and create issues
       run: |
         # Parse the alerts and issues
         alerts=$(jq -c '.[]' alerts.json)
         issues=$(jq -c '.[]' issues.json)

         # For each alert, check if a corresponding issue exists
         for alert in ${alerts[@]}; do
           alert_title=$(echo "$alert" | jq -r '.description')
           dismissed_title="#DISMISSED $alert_title"

           # Check if an issue with the dismissed title exists
           issue_exists=$(echo "$issues" | jq -r "select(.title == \"$dismissed_title\")")

           # If no issue exists, create a new one
           if [ -z "$issue_exists" ]; then
             curl -X POST \
               -H "Accept: application/vnd.github+json" \
               -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               -d '{"title": "'"$dismissed_title"'", "body": "'"$alert_title"'"}' \
               https://api.github.com/repos/ncsu-csc472-spring2024/grass-CI-playground/issues
           fi
         done
         
        
          
       #trigger a rerun