---
name: Docker

# This workflow builds and pushes docker images to dockerhub
#
# Summary
#
# job docker-os-matrix:
# * creates tags <version>-alpine, <version>-debian and <version>-ubuntu for each release
# * creates tags <branch_name>-alpine, <branch_name>-debian and <branch_name>-ubuntu for all triggered branches
# * creates tags current-alpine, current-debian and current-ubuntu for releasebranch_8_3
# * creates tag latest for last stable release with ubuntu os

on:
  push:
    branches:
      - main
      - releasebranch_*
      - "!releasebranch_7_*"
    # tags: ['*.*.*']
    paths-ignore: [doc/**]
  pull_request:
    paths:
      - .github/workflows/docker.yml
      - Dockerfile
      - docker/**
      - "!docker/**.md"
  workflow_dispatch:
  release:
    types: [published]

permissions: {}

jobs:
  # Run for push to configured branches and all published releases.
  # Take care of different os.
  # For main branch, created tags are:
  #     main-alpine, main-debian, main-ubuntu
  # For releasebranch_8_3, created tags are:
  #     current-alpine, current-debian, current-ubuntu,
  #     releasebranch_8_3-alpine, releasebranch_8_3-debian, releasebranch_8_3-ubuntu
  # For a release, e.g. 8.3.0, created tags are:
  #     8.3.0-alpine, 8.3.0-debian, 8.3.0-ubuntu and latest (with ubuntu)
  docker-os-matrix:
    name: ${{ matrix.os }} for ${{ github.ref }}
    # if: github.repository_owner == 'OSGeo'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os:
          - alpine
          - debian
          - ubuntu
          - ubuntu_wxgui
      fail-fast: false

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Get the latest tag
        run: |
          # Make sure tags are fetched
          git fetch --tags
          # Get sorted list of tags, keep the first that has a semver pattern (not RCs)
          LATEST_TAG="$(git tag --sort=-v:refname \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' \
            | head -n 1)"
          echo "LATEST_TAG=${LATEST_TAG}" >> "${GITHUB_ENV}"
          echo "LATEST_TAG is: ${LATEST_TAG}"
      - run: git branch -l
      - run: git branch -l --sort=-v:refname
      - run: git branch --all --sort=-v:refname
      - run: git branch --all --contains "${LATEST_TAG}"
      - run: git branch --all --contains "${LATEST_TAG_INVALID}"
      - run: exit 1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: osgeo/grass-gis
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=raw,value=current,enable=${{ github.ref == format('refs/heads/{0}', 'releasebranch_8_3') }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/tags/{0}', env.LATEST_TAG ) && matrix.os == 'ubuntu' }},suffix=
          flavor: |
            latest=false
            suffix=-${{ matrix.os }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # v3.4.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
      - name: Login to DockerHub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN  }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
        with:
          push: ${{ github.event_name != 'pull_request' }}
          pull: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          file: docker/${{ matrix.os }}/Dockerfile
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha,scope=${{ matrix.os }}
          cache-to: type=gha,mode=max,scope=${{ matrix.os }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
