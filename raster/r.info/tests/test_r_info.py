"""
Name:       r.info test
Purpose:    Tests r.info and its flags/options.

Author:     Sunveer Singh (Google Code-in 2017), Kriti Birda
Copyright:  (C) 2017 by Sunveer Singh, Kriti Birda and the GRASS Development Team
Licence:    This program is free software under the GNU General Public
                License (>=v2). Read the file COPYING that comes with GRASS
                for details.
"""

import json

import grass.script as gs
from grass.gunittest.checkers import text_to_keyvalue
import pytest

json_format_expected_no_stats = {
    "north": 100,
    "south": 0,
    "east": 100,
    "west": 0,
    "nsres": 1,
    "ewres": 1,
    "rows": 100,
    "cols": 100,
    "min": 1,
    "max": 3,
    "cells": 10000,
    "datatype": "CELL",
    "ncats": 3,
    "map": "landuse",
    "maptype": "raster",
    "mapset": "PERMANENT",
    "title": "Sample Land-Use",
    "timestamp": None,
    "units": None,
    "vdatum": None,
    "semantic_label": None,
    "source1": "",
    "source2": "",
    "description": "generated by r.mapcalc",
    "comments": "if(row() < 33, 1, if(row() < 66, 2, 3))",
}


def assert_rinfo_output(expected_str, received_str):
    expected = dict(**text_to_keyvalue(expected_str, sep="=", skip_empty=True))
    received = dict(**text_to_keyvalue(received_str, sep="=", skip_empty=True))
    assert expected == received


def assert_rinfo_json_output(expected, received):
    # the following fields vary with the Grass sample data's path
    # therefore only check for their presence in the JSON output
    # and not exact values
    remove_fields = ["location", "project", "database", "date", "creator"]
    for field in remove_fields:
        assert field in received
        received.pop(field)

    assert sorted(list(expected.keys())) == sorted(list(received.keys()))

    for key, value in expected.items():
        assert_msg = f"{key}: expected {value}, received {received[key]}"
        if isinstance(value, float):
            assert value == pytest.approx(received[key]), assert_msg
        else:
            assert value == received[key], assert_msg


def test_flagg(setup_maps):
    """Testing flag g with map geology_30m using simple module"""
    expected_str = """north=100
        south=0
        east=100
        west=0
        nsres=1
        ewres=1
        rows=100
        cols=100
        cells=10000
        datatype=CELL
        ncats=3"""
    received_str = gs.read_command(
        "r.info", map="landuse", flags="g", env=setup_maps.env
    )
    assert_rinfo_output(expected_str, received_str)


def test_flagr(setup_maps):
    expected_str = """min=1
    max=3"""
    received_str = gs.read_command(
        "r.info", map="landuse", flags="r", env=setup_maps.env
    )
    assert_rinfo_output(expected_str, received_str)


def test_flage(setup_maps):
    gs.read_command("r.info", map="landuse", flags="e", env=setup_maps.env)


def test_flagh(setup_maps):
    gs.read_command("r.info", map="landuse", flags="h", env=setup_maps.env)


def test_format_json(setup_maps):
    """Testing using simple module in json format"""
    output = gs.read_command(
        "r.info", map="landuse", flags="g", format="json", env=setup_maps.env
    )
    received = json.loads(output)
    assert_rinfo_json_output(json_format_expected_no_stats, received)


def test_sflag_format_json(setup_maps):
    """Testing using simple module in json format with sflag"""
    expected_json_with_stats = {
        **json_format_expected_no_stats,
        "n": 10000,
        "sum": 20300,
        "stddev": 0.817985,
        "mean": 2.03,
    }
    output = gs.read_command(
        "r.info", map="landuse", flags="gs", format="json", env=setup_maps.env
    )
    received = json.loads(output)
    assert_rinfo_json_output(expected_json_with_stats, received)


def test_comments_one_line(setup_maps):
    """Check that one line is text without any newlines"""
    output = gs.read_command("r.info", map="landuse", format="json", env=setup_maps.env)
    result = json.loads(output)
    assert result["comments"].endswith("\n") is False
    assert result["comments"] == "if(row() < 33, 1, if(row() < 66, 2, 3))"


def test_comments_continued_line(setup_maps):
    """Check that continued lines are merged"""
    output = gs.read_command("r.info", map="map3", format="json", env=setup_maps.env)
    result = json.loads(output)
    assert result["comments"].endswith("\n") is False
    assert (
        result["comments"]
        == "if(row() < 50, 10, 20) + if(col() < 50, 30, 40) + if(col() < 50, 30, \n40) + if(row() < 50, 10, 20)"
    )


def test_comments_multiple_lines(setup_maps):
    """Check multiple lines are preserved"""
    output = gs.read_command("r.info", map="map2", format="json", env=setup_maps.env)
    result = json.loads(output)
    assert result["comments"].endswith("\n") is False

    lines = result["comments"].splitlines()
    assert len(lines) == 3
    assert lines == ["1", "my comment", "my comment 2"]
