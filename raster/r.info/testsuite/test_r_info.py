"""
Name:       r.info test
Purpose:    Tests r.info and its flags/options.

Author:     Sunveer Singh, Google Code-in 2017
Copyright:  (C) 2017 by Sunveer Singh and the GRASS Development Team
Licence:    This program is free software under the GNU General Public
                License (>=v2). Read the file COPYING that comes with GRASS
                for details.
"""

import json

from grass.gunittest.case import TestCase
from grass.gunittest.gmodules import SimpleModule


class TestReport(TestCase):
    @classmethod
    def setUpClass(cls):
        """Use temporary region settings"""
        cls.use_temp_region()
        cls.json_format_expected_no_stats = {
            "north": 228500,
            "south": 215000,
            "east": 645000,
            "west": 630000,
            "nsres": 10,
            "ewres": 10,
            "rows": 1350,
            "cols": 1500,
            "min": 34300,
            "max": 43600,
            "cells": 2025000,
            "datatype": "CELL",
            "ncats": 43600,
            "map": "lakes",
            "maptype": "raster",
            "mapset": "PERMANENT",
            "date": "Fri Jan 19 23:49:34 2007",
            "creator": "helena",
            "title": "South-West Wake county: Wake county lakes",
            "timestamp": None,
            "units": None,
            "vdatum": None,
            "semantic_label": None,
            "source1": "",
            "source2": "",
            "description": "generated by r.mapcalc",
            "comments": "1 * lakes_large",
        }

    @classmethod
    def tearDownClass(cls):
        """!Remove the temporary region"""
        cls.del_temp_region()

    def test_flag_g(self):
        """Testing flag g with map geology_30m using simple module"""
        output_str = """north=228500
        south=215000
        east=645000
        west=630000
        nsres=10
        ewres=10
        rows=1350
        cols=1500
        cells=2025000
        datatype=CELL
        ncats=43600"""
        self.assertModuleKeyValue(
            module="r.info",
            map="lakes",
            flags="g",
            reference=output_str,
            precision=2,
            sep="=",
        )

    def test_flag_r(self):
        """Testing flag r with map landcover_1m using simple module"""
        output_str = """min=34300
        max=43600"""
        self.assertModuleKeyValue(
            module="r.info",
            map="lakes",
            flags="r",
            reference=output_str,
            precision=2,
            sep="=",
        )

    def test_flag_s(self):
        """Testing flag s with map landcover_1m using simple module"""
        output_str = """min=34300
        max=43600
        cells=2025000
        n=36011
        mean=39002.3492821638
        stddev=739.796536643115
        sum=1404513600"""
        self.assertModuleKeyValue(
            module="r.info",
            map="lakes",
            flags="s",
            reference=output_str,
            precision=2,
            sep="=",
        )

    def test_flag_e(self):
        """Testing flag e with map lsat7_2002_50"""
        module = SimpleModule(
            "r.info",
            map="lakes",
            flags="e",
        )
        self.assertModule(module)
        result = module.outputs.stdout.splitlines()
        expected = [
            "map=lakes",
            "maptype=raster",
            "mapset=PERMANENT",
            "location=",
            "project=",
            "database=",
            'date="Fri Jan 19 23:49:34 2007"',
            'creator="helena"',
            'title="South-West Wake county: Wake county lakes"',
            'timestamp="none"',
            'units="none"',
            'vdatum="none"',
            'semantic_label="none"',
            'source1=""',
            'source2=""',
            'description="generated by r.mapcalc"',
            'comments="1 * lakes_large"',
        ]

        # Skip exact match for lines containing "location", "project", "database" because their values vary
        for i, component in enumerate(result):
            if any(
                keyword in component for keyword in ("location", "project", "database")
            ):
                continue
            self.assertEqual(component, expected[i], f"Mismatch at line {i + 1}")

    def test_flag_h(self):
        """Testing flag h with map zipcodes"""
        module = SimpleModule("r.info", map="lakes", flags="h")
        self.assertModule(module)
        result = module.outputs.stdout.splitlines()
        expected = [
            "Data Source:",
            "   ",
            "   ",
            "Data Description:",
            "   generated by r.mapcalc",
            "Comments:",
            "   1 * lakes_large",
        ]

        self.assertListEqual(result, expected, "Mismatch in printed output (-h flag)")

    def test_no_flag(self):
        """Testing without any flags and with map zipcodes"""
        module = SimpleModule("r.info", map="lakes")
        self.assertModule(module)
        result = module.outputs.stdout.splitlines()
        expected = [
            " +----------------------------------------------------------------------------+",
            " | Map:      lakes                          Date: Fri Jan 19 23:49:34 2007    |",
            " | Mapset:   PERMANENT                      Login of Creator: helena          |",
            " | Project:                                                                   |",
            " | DataBase:                                                                  |",
            " | Title:    South-West Wake county: Wake county lakes                        |",
            " | Timestamp: none                                                            |",
            " |----------------------------------------------------------------------------|",
            " |                                                                            |",
            " |   Type of Map:  raster               Number of Categories: 43600           |",
            " |   Data Type:    CELL                 Semantic label: (none)                |",
            " |   Rows:         1350                                                       |",
            " |   Columns:      1500                                                       |",
            " |   Total Cells:  2025000                                                    |",
            " |        Projection: Lambert Conformal Conic                                 |",
            " |            N:     228500    S:     215000   Res:    10                     |",
            " |            E:     645000    W:     630000   Res:    10                     |",
            " |   Range of data:    min = 34300  max = 43600                               |",
            " |                                                                            |",
            " |   Data Description:                                                        |",
            " |    generated by r.mapcalc                                                  |",
            " |                                                                            |",
            " |   Comments:                                                                |",
            " |    1 * lakes_large                                                         |",
            " |                                                                            |",
            " +----------------------------------------------------------------------------+",
            "",
        ]

        # Skip exact match for lines containing "Project:" or "DataBase:" because their values vary
        for i, component in enumerate(result):
            if "Project:" in component or "DataBase:" in component:
                continue
            self.assertEqual(component, expected[i], f"Mismatch at line {i + 1}")

    def test_flags_grse(self):
        """Testing flags grse with map lsat7_2002_50"""
        module = SimpleModule(
            "r.info",
            map="lakes",
            flags="grse",
        )
        self.assertModule(module)
        result = module.outputs.stdout.splitlines()
        expected = [
            "north=228500",
            "south=215000",
            "east=645000",
            "west=630000",
            "nsres=10",
            "ewres=10",
            "rows=1350",
            "cols=1500",
            "cells=2025000",
            "datatype=CELL",
            "ncats=43600",
            "min=34300",
            "max=43600",
            "n=36011",
            "mean=39002.3492821638",
            "stddev=739.796536643115",
            "sum=1404513600",
            "map=lakes",
            "maptype=raster",
            "mapset=PERMANENT",
            "location=",
            "project=",
            "database=",
            'date="Fri Jan 19 23:49:34 2007"',
            'creator="helena"',
            'title="South-West Wake county: Wake county lakes"',
            'timestamp="none"',
            'units="none"',
            'vdatum="none"',
            'semantic_label="none"',
            'source1=""',
            'source2=""',
            'description="generated by r.mapcalc"',
            'comments="1 * lakes_large"',
        ]

        # Skip exact match for lines containing "location", "project", "database" because their values vary
        for i, component in enumerate(result):
            if any(
                keyword in component for keyword in ("location", "project", "database")
            ):
                continue
            self.assertEqual(component, expected[i], f"Mismatch at line {i + 1}")

    def _test_format_json_helper(self, module, expected):
        self.runModule(module)
        result = json.loads(module.outputs.stdout)

        # the following fields vary with the Grass sample data's path
        # therefore only check for their presence in the JSON output
        # and not exact values
        remove_fields = ["location", "project", "database"]
        for field in remove_fields:
            self.assertIn(field, result)
            result.pop(field)

        self.assertCountEqual(list(expected.keys()), list(result.keys()))

        for key, value in expected.items():
            if isinstance(value, float):
                self.assertAlmostEqual(value, result[key])
            else:
                self.assertEqual(value, result[key])

    def test_format_json(self):
        """Testing using simple module in json format"""
        module = SimpleModule("r.info", map="lakes", flags="g", format="json")
        self._test_format_json_helper(module, self.json_format_expected_no_stats)

    def test_sflag_format_json(self):
        """Testing using simple module in json format with sflag"""
        expected_json_with_stats = {
            **self.json_format_expected_no_stats,
            "n": 36011,
            "sum": 1404513600,
            "stddev": 739.7965366431155,
            "mean": 39002.349282163785,
        }
        module = SimpleModule("r.info", map="lakes", flags="gs", format="json")
        self._test_format_json_helper(module, expected_json_with_stats)


class TestComments(TestCase):
    """Check printing of comments"""

    def test_comments_one_line(self):
        """Check that one line is text without any newlines"""
        module = SimpleModule("r.info", map="lakes", format="json")
        self.runModule(module)
        result = json.loads(module.outputs.stdout)
        self.assertFalse(result["comments"].endswith("\n"))
        self.assertEqual(result["comments"], "1 * lakes_large")

    def test_comments_continued_line(self):
        """Check that continued lines are merged"""
        module = SimpleModule("r.info", map="elevation", format="json")
        self.runModule(module)
        result = json.loads(module.outputs.stdout)
        self.assertFalse(result["comments"].endswith("\n"))
        self.assertEqual(
            result["comments"],
            'r.proj input="ned03arcsec" location="northcarolina_latlong" '
            'mapset="helena" output="elev_ned10m" method="cubic" resolution=10',
        )

    def test_comments_multiple_lines(self):
        """Check multiple lines are preserved"""
        module = SimpleModule("r.info", map="lsat7_2002_30", format="json")
        self.runModule(module)
        result = json.loads(module.outputs.stdout)
        self.assertFalse(result["comments"].endswith("\n"))

        lines = result["comments"].splitlines()
        self.assertEqual(
            len(lines),
            31,
        )
        self.assertEqual(
            lines[0],
            'r.in.gdal input="p016r035_7t20020524_z17_nn30_nc_spm_wake.tif" output="lsat7_2002_30"',
        )
        self.assertEqual(
            lines[-1],
            'i.landsat.rgb "b=lsat7_2002_10" "g=lsat7_2002_20" "r=lsat7_2002_30"',
        )


if __name__ == "__main__":
    from grass.gunittest.main import test

    test()
