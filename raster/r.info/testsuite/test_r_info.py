"""
Name:       r.info test
Purpose:    Tests r.info and its flags/options.

Author:     Sunveer Singh, Google Code-in 2017
Copyright:  (C) 2017 by Sunveer Singh and the GRASS Development Team
Licence:    This program is free software under the GNU General Public
	            License (>=v2). Read the file COPYING that comes with GRASS
	            for details.
"""

import json

from grass.gunittest.case import TestCase
from grass.gunittest.gmodules import SimpleModule


class TestReport(TestCase):
    @classmethod
    def setUpClass(cls):
        """Use temporary region settings"""
        cls.use_temp_region()

    @classmethod
    def tearDownClass(cls):
        """!Remove the temporary region"""
        cls.del_temp_region()

    def test_flagg(self):
        """Testing flag g with map geology_30m using simple module"""
        output_str = """north=228500
        south=215000
        east=645000
        west=630000
        nsres=10
        ewres=10
        rows=1350
        cols=1500
        cells=2025000
        datatype=CELL
        ncats=43600"""
        self.assertModuleKeyValue(
            module="r.info",
            map="lakes",
            flags="g",
            reference=output_str,
            precision=2,
            sep="=",
        )

    def test_flagr(self):
        """Testing flag r with map landcover_1m using simple module"""
        output_str = """min=34300
        max=43600"""
        self.assertModuleKeyValue(
            module="r.info",
            map="lakes",
            flags="r",
            reference=output_str,
            precision=2,
            sep="=",
        )

    def test_flage(self):
        """Testing flag e with map lsat7_2002_50"""
        self.assertModule("r.info", map="lakes", flags="e")

    def test_flagh(self):
        """Testing flag h with map zipcodes"""
        self.assertModule("r.info", map="lakes", flags="h")

    def test_flagg_json(self):
        """Testing flag g with map geology_30m using simple module in json format"""
        expected = {
            "north": 228500.0,
            "south": 215000.0,
            "east": 645000.0,
            "west": 630000.0,
            "nsres": 10.0,
            "ewres": 10.0,
            "rows": 1350.0,
            "cols": 1500.0,
            "cells": 2025000.0,
            "datatype": "CELL",
            "ncats": 43600.0,
        }
        module = SimpleModule("r.info", map="lakes", flags="g", format="json")
        self.runModule(module)
        result = json.loads(module.outputs.stdout)
        self.assertDictEqual(expected, result)

    def test_flagr_json(self):
        """Testing flag r with map landcover_1m using simple module in json format"""
        expected = {"min": 34300.0, "max": 43600.0}
        module = SimpleModule("r.info", map="lakes", flags="r", format="json")
        self.runModule(module)
        result = json.loads(module.outputs.stdout)
        self.assertDictEqual(expected, result)

    def test_flage_json(self):
        """Testing flag e with map lsat7_2002_50 in json format"""
        expected = {
            "map": "lakes",
            "maptype": "raster",
            "mapset": "PERMANENT",
            "location": "nc_spm_08_grass7",
            "project": "nc_spm_08_grass7",
            "date": "Fri Jan 19 23:49:34 2007",
            "creator": "helena",
            "title": "South-West Wake county: Wake county lakes",
            "timestamp": None,
            "units": None,
            "vdatum": None,
            "semantic_label": None,
            "source1": "",
            "source2": "",
            "description": "generated by r.mapcalc",
            "comments": ["1 * lakes_large"],
        }

        module = SimpleModule("r.info", map="lakes", flags="e", format="json")
        self.runModule(module)
        result = json.loads(module.outputs.stdout)

        # database value will vary with the Grass sample data path
        self.assertIn("database", result)
        result.pop("database")
        self.assertDictEqual(expected, result)

    def test_flagh_json(self):
        """Testing flag h with map zipcodes in json format"""
        expected = {
            "source1": "",
            "source2": "",
            "description": "generated by r.mapcalc",
            "comments": ["1 * lakes_large"],
        }
        module = SimpleModule("r.info", map="lakes", flags="h", format="json")
        self.runModule(module)
        result = json.loads(module.outputs.stdout)
        self.assertDictEqual(expected, result)


if __name__ == "__main__":
    from grass.gunittest.main import test

    test()
