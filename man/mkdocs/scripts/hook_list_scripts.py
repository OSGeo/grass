from pathlib import Path
import re
from jinja2 import Environment


def github_path(toolname, scripts_tools):
    """Finds GitHub path for a tool in GRASS GIS with subtool handling"""

    auto_generated_indexes = [
        "database",
        "db",
        "display",
        "general",
        "imagery",
        "miscellaneous",
        "postscript",
        "raster",
        "raster3d",
        "temporal",
        "vector",
    ]

    # Special cases for documentation pages that don't match the pattern matching scheme
    special_docs = [
        {"name": "projectionintro", "path": "doc"},
        {"name": "grass_database", "path": "doc"},
        {"name": "databaseintro", "path": "db"},
    ]

    # Exit early if toolname is empty
    if not toolname:
        return None

    # Handle special cases
    if toolname in [x["name"] for x in special_docs]:
        return next((x["path"] for x in special_docs if x["name"] == toolname), None)

    # Convert filter() results to a list
    tool_matches = list(filter(lambda x: toolname in x, scripts_tools))

    # print(f"Tool Matches: {tool_matches}")

    # If there's exactly one match, return it immediately
    if len(tool_matches) == 1:
        return tool_matches[0]

    # Prioritize exact matches
    exact_match = next((x for x in tool_matches if x.endswith(toolname)), None)
    # print(f"Exact - Tool Matches: {exact_match}")
    if toolname in auto_generated_indexes:
        # print(f"Exact Match - Autogenerated: {exact_match}")
        return None
    if exact_match:
        return exact_match

    # Prefer major categories (raster, vector, imagery, temporal, etc.)
    category_match = next(
        (x for x in tool_matches if not x.startswith("scripts/")), None
    )
    # print(f"Category - Tool Matches: {category_match}")
    if category_match:
        return category_match

    # Check for subtools in the same directory (e.g., r.sim -> r.sim.water, r.sim.sediment)
    subtool_prefix = toolname + "."  # Ensure it matches the full prefix
    sub_tool_matches = [x for x in tool_matches if x.startswith(subtool_prefix)]

    # print(f"Subtool - Tool Matches: {sub_tool_matches}")
    # If exactly one subtool match exists, return it
    if len(sub_tool_matches) == 1:
        return sub_tool_matches[0]

    # If multiple subtools exist, prioritize based on name length (more specific subtools come first)
    if sub_tool_matches:
        sub_tool_matches.sort(key=len)  # Shorter names first
        return sub_tool_matches[0]  # Return the most specific match

    # Handle special case for "intro" pages
    # print(f"Intro Doc - Matches: {tool_matches}")
    if toolname.endswith("intro"):
        return toolname.replace("intro", "")

    # Special case for gui/wxpython/docs
    if toolname.startswith("g."):
        # print(f"GUI Docs: {toolname}")
        tool_dir = toolname.split(".")[-1]
        return f"gui/wxpython/{tool_dir}/{toolname}"

    # If nothing else, return the first available match
    return tool_matches[0] if tool_matches else None


def on_env(env: Environment, config, files):
    """Enable loopcontrols extension in Jinja2"""
    env.add_extension("jinja2.ext.loopcontrols")
    env.globals["github_path"] = github_path
    return env


def on_config(config):
    """
    Read the list of tools from the source directory and
    store it in MkDocs extra config. These are used to generate
    the correct links to the documentation in GitHub.
    """
    scripts_dir = Path("source")
    scripts_tools = []
    url_pattern = re.compile(
        r"https://github.com/OSGeo/grass/tree/main/([^ )]+)"
    )  # Read the mkdocs.yml file

    for file in scripts_dir.glob("*.md"):
        with file.open() as f:
            for line in f:
                match = url_pattern.search(line)
                if match:
                    toolname = match.group(1).strip()
                    scripts_tools.append(toolname)

    # Store in MkDocs extra config
    config["extra"]["scripts_tools"] = scripts_tools
    return config


if __name__ == "__main__":
    tool_paths = [
        "raster/r.tile",
        "raster/r.water.outlet",
        "temporal/t.rast.out.vtk",
        "temporal/t.rast3d.list",
        "scripts/v.report",
        "general/g.proj",
        "raster/r.profile",
        "raster/r.carve",
        "imagery/i.landsat.acca",
        "vector/v.lidar.edgedetection",
        "temporal/t.shift",
        "scripts/db.in.ogr",
        "vector/v.reclass",
        "raster/r.li/r.li.cwed",
        "vector/v.surf.bspline",
        "temporal/t.sample",
        "imagery/i.target",
        "scripts/d.polar",
        "scripts/i.colors.enhance",
        "raster/r.statistics",
        "temporal/t.rast3d.mapcalc",
        "temporal/t.vect.import",
        "vector/v.support",
        "raster/r.fill.stats",
        "gui/wxpython/docs",
        "raster/r.mapcalc",
        "temporal/t.remove",
        "vector/v.qcount",
        "db/drivers/ogr",
        "gui/wxpython/rdigit",
        "imagery/i.aster.toar",
        "imagery/i.maxlik",
        "scripts/g.download.location",
        "scripts/r.reclass.area",
        "gui/wxpython/docs",
        "raster/r.surf.fractal",
        "raster/r.walk",
        "gui/wxpython/image2target",
        "lib/init",
        "vector/v.drape",
        "scripts/r.drain",
        "gui/wxpython/vdigit",
        "vector/v.clean",
        "raster/r.in.mat",
        "general/g.filename",
        "raster/r.li/r.li.mpa",
        "raster/r.li/r.li.padrange",
        "raster/r.support.stats",
        "temporal/t.info",
        "scripts/g.extension.all",
        "vector/v.normal",
        "scripts/v.db.join",
        "raster/r.in.ascii",
        "vector/v.net.iso",
        "display/d.histogram",
        "scripts/v.db.renamecolumn",
        "display/d.mon",
        "raster/r.out.ascii",
        "vector/v.in.pdal",
        "scripts/g.extension",
        "imagery/i.ortho.photo/i.ortho.init",
        "temporal/t.support",
        "vector/v.hull",
        "raster/r.sun",
        "raster/r.flow",
        "raster/r.his",
        "raster/r.in.gridatb",
        "raster/r.resamp.filter",
        "raster/r.in.poly",
        "temporal/t.snap",
        "lib/init",
        "raster/r.external.out",
        "raster/r.uslek",
        "vector/v.generalize",
        "gui/wxpython/gcp",
        "raster/r.buffer",
        "display/d.info",
        "temporal/t.rast.neighbors",
        "display/d.rhumbline",
        "raster/r.univar",
        "temporal/t.rast.accumulate",
        "raster/r.relief",
        "gui/wxpython/vdigit",
        "raster/r.univar",
        "raster/r.region",
        "imagery/i.signatures",
        "raster3d/r3.retile",
        "imagery/i.topo.corr",
        "temporal/t.rast.export",
        "db/drivers/dbf",
        "display",
        "display/d.labels",
        "imagery/i.rgb.his",
        "lib/htmldriver",
        "gui/wxpython/datacatalog",
        "raster/r.quantile",
        "vector/v.buffer",
        "raster/r.colors.out",
        "scripts/v.in.mapgen",
        "raster/r.patch",
        "imagery/i.ifft",
        "raster3d/r3.in.v5d",
        "gui/wxpython/photo2image",
        "vector/v.info",
        "raster/r.sim/r.sim.sediment",
        "vector/v.profile",
        "gui/wxpython/timeline",
        "vector/v.net.spanningtree",
        "imagery/i.eb.hsebal01",
        "display/d.erase",
        "raster/r.reclass",
        "vector/v.overlay",
        "raster/r.info",
        "vector/v.class",
        "raster/r.horizon",
        "vector/v.voronoi",
        "lib/psdriver",
        "db/db.execute",
        "raster/r.basins.fill",
        "raster/r.out.bin",
        "display/d.text",
        "gui/wxpython/psmap",
        "temporal/t.rast.aggregate.ds",
        "vector/v.net.connectivity",
        "raster3d",
        "vector/v.out.svg",
        "imagery/i.eb.netrad",
        "raster/r.usler",
        "vector/v.net.distance",
        "imagery/i.modis.qc",
        "raster/r.contour",
        "imagery/i.ortho.photo/i.ortho.target",
        "scripts/d.what.rast",
        "display/d.vect.chart",
        "doc",
        "temporal/t.rast.accdetect",
        "scripts/v.centroids",
        "vector/v.split",
        "scripts/d.to.rast",
        "temporal/t.rast3d.univar",
        "raster/r.mask.status",
        "scripts/r.tileset",
        "scripts/r.grow",
        "display/d.vect.thematic",
        "gui/wxpython/rdigit",
        "raster3d/r3.to.rast",
        "scripts/d.frame",
        "imagery",
        "scripts/r.fillnulls",
        "imagery/i.ortho.photo/i.ortho.camera",
        "temporal/t.rast.aggregate",
        "general/g.copy",
        "scripts/v.db.univar",
        "scripts/i.oif",
        "temporal/t.upgrade",
        "raster/r.spread",
        "temporal/t.rast.mapcalc",
        "raster/r.what.color",
        "raster3d/r3.info",
        "temporal/t.rast.contour",
        "temporal/t.rast.univar",
        "gui/wxpython/dbmgr",
        "vector/v.net.path",
        "raster/r.out.pov",
        "raster/r.sim/r.sim.water",
        "vector/v.in.ascii",
        "raster/r.li/r.li.edgedensity",
        "vector/v.lrs/v.lrs.label",
        "vector/v.label",
        "scripts/i.spectral",
        "raster/r.surf.random",
        "vector/v.extrude",
        "gui/wxpython/docs",
        "db/db.drivers",
        "scripts/v.db.update",
        "vector/v.lrs/v.lrs.create",
        "vector/v.surf.idw",
        "db/db.copy",
        "raster/r.quant",
        "raster/r.surf.area",
        "scripts/i.band.library",
        "raster/r.watershed/front",
        "raster/r.describe",
        "scripts/v.dissolve",
        "raster/r.out.gridatb",
        "db/db.connect",
        "scripts/db.test",
        "lib/cairodriver",
        "temporal/t.rast3d.extract",
        "db/db.createdb",
        "raster/r.li/r.li.pielou",
        "gui",
        "raster/r.report",
        "db/drivers/sqlite",
        "raster/r.terraflow",
        "gui/wxpython/dbmgr",
        "raster3d/r3.flow",
        "imagery/i.emissivity",
        "raster3d/r3.out.vtk",
        "raster/r.geomorphon",
        "scripts/g.download.project",
        "vector/v.what",
        "raster/r.thin",
        "vector/v.net.salesman",
        "raster3d/r3.flow",
        "scripts/i.image.mosaic",
        "temporal/t.rast.extract",
        "raster/r.out.gdal",
        "vector/v.lrs",
        "scripts/i.pansharpen",
        "raster/r.category",
        "raster3d/r3.gradient",
        "vector/v.net.allpairs",
        "gui/wxpython/docs",
        "raster3d/r3.mask",
        "display/d.grid",
        "raster/r.out.ppm3",
        "temporal/t.rast.import",
        "display/d.graph",
        "display/d.rgb",
        "vector/v.neighbors",
        "general/g.message",
        "raster/r.li/r.li.padcv",
        "scripts/v.db.droprow",
        "raster/r.to.rast3",
        "gui/wxpython/tplot",
        "vector/v.proj",
        "raster/r.rescale.eq",
        "raster/r.external",
        "vector/v.delaunay",
        "raster3d/r3.null",
        "raster/r.colors",
        "raster/r.colors",
        "scripts/d.shade",
        "display/d.linegraph",
        "scripts/v.to.lines",
        "vector/v.distance",
        "raster/r.recode",
        "vector/v.net.alloc",
        "raster/r.clump",
        "gui/wxpython/animation",
        "vector/v.decimate",
        "raster/r.what",
        "lib/db/sqlp",
        "imagery/i.his.rgb",
        "vector/v.in.ogr",
        "raster/r.series.accumulate",
        "scripts/d.background",
        "raster3d/r3.in.bin",
        "vector/v.db.select",
        "vector/v.fill.holes",
        "scripts/r.unpack",
        "vector/v.rectify",
        "scripts/v.db.addcolumn",
        "display/d.northarrow",
        "vector/v.to.rast",
        "lib/pngdriver",
        "scripts/v.db.dropcolumn",
        "raster/r.li/r.li.dominance",
        "imagery/i.eb.soilheatflux",
        "gui/wxpython/gmodeler",
        "vector/v.what.rast",
        "vector/v.colors",
        "gui/wxpython/docs",
        "raster/r.timestamp",
        "vector/v.out.ogr",
        "raster/r.proj",
        "raster/r.series",
        "gui/wxpython/docs",
        "vector/v.external",
        "temporal/t.list",
        "raster/r.li/r.li.renyi",
        "general/g.version",
        "general/g.region",
        "vector/v.to.3d",
        "raster/r.path",
        "imagery/i.ortho.photo/i.ortho.transform",
        "raster/r.stats",
        "raster3d/r3.cross.rast",
        "vector/v.out.ascii",
        "raster/r.volume",
        "temporal/t.rast.to.rast3",
        "imagery/i.segment",
        "imagery/i.vi",
        "temporal/t.vect.algebra",
        "db/db.dropdb",
        "vector/v.outlier",
        "vector/v.out.dxf",
        "raster/r.li/r.li.shape",
        "raster/r.resamp.stats",
        "vector/v.vol.rst",
        "raster3d/r3.gwflow",
        "ps/ps.map",
        "display/d.profile",
        "scripts/v.in.e00",
        "temporal/t.rast.to.vect",
        "vector/v.surf.rst",
        "vector/v.external.out",
        "vector/v.net",
        "raster/r.mfilter",
        "temporal/t.vect.what.strds",
        "temporal/t.topology",
        "general/g.tempfile",
        "scripts/r.semantic.label",
        "vector/v.in.region",
        "display/d.rast.num",
        "raster/r.composite",
        "scripts/g.manual",
        "gui/wxpython/mapswipe",
        "general/g.parser",
        "display/d.title",
        "raster/r.in.png",
        "raster/r.out.ppm",
        "raster/r.compress",
        "general/g.ppmtopng",
        "vector/v.to.points",
        "scripts/v.pack",
        "raster/r.to.vect",
        "raster3d/r3.in.ascii",
        "raster3d/r3.timestamp",
        "temporal/t.rast.algebra",
        "imagery/i.rectify",
        "raster/r.li/r.li.richness",
        "raster/r.topmodel",
        "raster3d/r3.support",
        "imagery/i.gensig",
        "scripts/r.out.xyz",
        "vector/v.random",
        "raster/r.cross",
        "misc/m.transform",
        "db/db.tables",
        "vector/v.lidar.growing",
        "raster/r.to.rast3elev",
        "vector/v.net.bridge",
        "raster/r.li/r.li.daemon",
        "vector/v.what.rast3",
        "imagery/i.cluster",
        "raster",
        "temporal/t.vect.list",
        "temporal/t.vect.export",
        "raster/r.gwflow",
        "raster/r.support",
        "vector/v.lrs/v.lrs.segment",
        "imagery/i.eb.evapfr",
        "raster/r.out.vrml",
        "vector/v.timestamp",
        "misc/m.nviz.script",
        "raster/r.surf.gauss",
        "temporal/t.rast.what",
        "display/d.font",
        "vector/v.colors.out",
        "temporal/t.rast.colors",
        "vector/v.segment",
        "raster/r.resamp.interp",
        "raster/r.resample",
        "scripts/r.in.aster",
        "temporal/t.rast.series",
        "vector/v.kernel",
        "display/d.where",
        "scripts/v.build.all",
        "raster/r.texture",
        "vector/v.out.pov",
        "vector/v.to.rast3",
        "imagery/i.eb.eta",
        "imagery/i.cca",
        "imagery/i.evapo.pt",
        "vector/v.patch",
        "raster/r.buildvrt",
        "scripts/i.tasscap",
        "raster3d/r3.out.ascii",
        "vector/v.lrs/v.lrs.where",
        "gui/wxpython/image2target",
        "vector",
        "general/g.mapsets",
        "scripts/d.what.vect",
        "gui/wxpython/animation",
        "vector/v.category",
        "raster/r.li/r.li.patchdensity",
        "gui/wxpython/psmap",
        "misc/m.measure",
        "scripts/d.rast.leg",
        "temporal/t.rast.gapfill",
        "raster/r.out.mat",
        "general/g.mapset",
        "raster3d/r3.mkdspf",
        "raster/r.grow.distance",
        "db/db.describe",
        "scripts/v.rast.stats",
        "gui/wxpython/docs",
        "vector/v.net.steiner",
        "temporal/t.select",
        "raster/r.fill.dir",
        "scripts/v.in.lines",
        "db/db.login",
        "raster/r.latlong",
        "vector/v.mkgrid",
        "imagery/i.ortho.photo/i.ortho.rectify",
        "general/g.findfile",
        "scripts/v.import",
        "scripts/v.what.vect",
        "raster/r.kappa",
        "raster/r.spreadpath",
        "scripts/r.rgb",
        "scripts/v.in.wfs",
        "raster/r.sunhours",
        "raster/r.ros",
        "vector/v.net.timetable",
        "scripts/r.in.wms",
        "imagery/i.smap",
        "temporal/t.rast.list",
        "scripts/r.blend",
        "display/d.path",
        "raster/r.viewshed",
        "raster/r.slope.aspect",
        "raster/r.solute.transport",
        "imagery/i.pca",
        "imagery/i.evapo.time",
        "raster/r.transect",
        "vector/v.sample",
        "scripts/v.in.geonames",
        "scripts/d.rast.edit",
        "gui/wxpython/tplot",
        "general/g.remove",
        "temporal/t.connect",
        "scripts/db.univar",
        "vector/v.out.vtk",
        "imagery/i.gensigset",
        "general/g.rename",
        "raster/r.li/r.li.mps",
        "scripts/d.correlate",
        "vector/v.univar",
        "misc/m.cogo",
        "vector/v.transform",
        "gui/wxpython/mapswipe",
        "raster3d/r3.out.v5d",
        "general/g.cairocomp",
        "display/d.rast",
        "general/g.mkfontcap",
        "temporal/t.merge",
        "vector/v.select",
        "raster3d/r3.neighbors",
        "raster/r.resamp.rst",
        "lib/vector",
        "scripts/r.import",
        "gui/wxpython/rlisetup",
        "raster/r.in.xyz",
        "db/db.select",
        "raster/r.mapcalc",
        "vector/v.build",
        "display/d.geodesic",
        "temporal/t.rename",
        "vector/v.kcv",
        "display/d.colorlist",
        "scripts/r.in.srtm",
        "vector/v.type",
        "lib/external/parson/test",
        "raster/r.random.cells",
        "raster/r.covar",
        "raster/r.object.geometry",
        "scripts/g.search.modules",
        "gui/wxpython/datacatalog",
        "scripts/d.out.file",
        "temporal/t.create",
        "temporal/t.rast3d.algebra",
        "raster/r.resamp.bspline",
        "general/g.gui",
        "lib/raster3d/test",
        "display/d.his",
        "imagery/i.atcorr",
        "vector/v.db.connect",
        "raster/r.regression.line",
        "raster/r.random.surface",
        "imagery/i.group",
        "scripts/v.db.droptable",
        "display/d.legend",
        "scripts/db.dropcolumn",
        "raster/r.sunmask",
        "imagery/i.zc",
        "raster/r.li/r.li.simpson",
        "scripts/r3.in.xyz",
        "raster/r.cost",
        "display/d.vect",
        "vector/v.label.sa",
        "scripts/r.plane",
        "gui/wxpython/timeline",
        "raster/r.regression.multi",
        "vector/v.vect.stats",
        "general/g.pnmcomp",
        "scripts/v.db.addtable",
        "vector/v.to.db",
        "misc/m.nviz.image",
        "db/db.databases",
        "scripts/r.shade",
        "display/d.redraw",
        "temporal/t.vect.db.select",
        "scripts/v.clip",
        "scripts/v.what.strds",
        "raster/r.out.png",
        "imagery/i.landsat.toar",
        "raster/r.rescale",
        "db/drivers/postgres",
        "imagery/i.ortho.photo/i.ortho.photo",
        "display/d.colortable",
        "raster3d/r3.stats",
        "scripts/r.pack",
        "raster/r.li/r.li.shannon",
        "scripts/r.mask",
        "db/db.columns",
        "display/d.barscale",
        "imagery/i.biomass",
        "raster/r.surf.contour",
        "temporal/t.copy",
        "temporal/t.vect.observe.strds",
        "raster/r.topidx",
        "raster/r.surf.idw",
        "raster/r.stream.extract",
        "vector/v.in.db",
        "raster/r.out.vtk",
        "raster/r.in.bin",
        "scripts/db.out.ogr",
        "raster/r.distance",
        "gui/wxpython/gmodeler",
        "vector/v.cluster",
        "raster/r.li",
        "scripts/wxpyimgview",
        "gui/wxpython/iclass",
        "raster/r.null",
        "vector/v.build.polylines",
        "vector/v.net.components",
        "temporal/t.vect.univar",
        "general/g.dirseps",
        "gui/wxpython/iclass",
        "gui/wxpython/gcp",
        "imagery/i.fft",
        "lib/init",
        "raster/r.neighbors",
        "scripts/db.droptable",
        "scripts/v.db.reconnect.all",
        "vector/v.extract",
        "temporal/t.vect.extract",
        "display/d.fontlist",
        "imagery/i.evapo.mh",
        "raster/r.li/r.li.padsd",
        "raster/r.param.scale",
        "vector/v.parallel",
        "scripts/v.unpack",
        "vector/v.net.centrality",
        "visualization/ximgview",
        "gui/wxpython/rlisetup",
        "raster/r.in.pdal",
        "vector/v.perturb",
        "vector/v.net.flow",
        "imagery/i.ortho.photo/i.ortho.elev",
        "raster/r.random",
        "vector/v.lidar.correction",
        "display/d.legend.vect",
        "raster/r.coin",
        "vector/v.out.postgis",
        "scripts/m.proj",
        "general/g.list",
        "scripts/r.buffer.lowmem",
        "general/g.findetc",
        "raster/r.stats.quantile",
        "scripts/i.in.spotvgt",
        "raster/r.mode",
        "imagery/i.evapo.pm",
        "raster/r.lake",
        "raster/r.stats.zonal",
        "temporal/t.register",
        "raster/r.out.mpeg",
        "raster/r.circle",
        "raster/r.series.interp",
        "general/g.access",
        "raster/r.in.gdal",
        "general/g.gisenv",
        "temporal/t.unregister",
        "raster/r.colors.out",
        "vector/v.net.visibility",
        "imagery/i.albedo",
        "scripts/r.colors.stddev",
        "gui/wxpython/photo2image",
        "scripts/r.mapcalc.simple",
        "display/d.rast.arrow",
        "raster/r.li/r.li.patchnum",
        "vector/v.edit",
        "temporal",
        "doc",
        "vector/v.in.dxf",
        "db",
        "raster3d/r3.out.bin",
    ]
    test_cases = [
        ("r.slope.aspect", "raster/r.slope.aspect"),
        ("r.mapcalc", "raster/r.mapcalc"),
        ("v.info", "vector/v.info"),
        ("vectorintro", "vector/vectorintro"),
        ("vector", None),
        ("r.sim.water", "raster/r.sim/r.sim.water"),
        ("r.blend", "scripts/r.blend"),
        ("g.gui.gcp", "gui/wxpython/gcp/g.gui.gcp"),
        ("g.gui.timeline", "gui/wxpython/timeline/g.gui.timeline"),
        ("g.gui.components", "gui/wxpython/docs/g.gui.components"),
        ("lib/htmldriver", None),
        ("wxGUI.components", "gui/wxpython/docs/wxGUI.components"),
        ("rl;dksa\njf\n", None),
        ("", None),
    ]
    # Run test cases
    for tool, expected in test_cases:
        edit_path = github_path(tool, tool_paths)
        print(f"Test: {tool} → Found: {edit_path} | Expected: {expected}")
        assert edit_path == expected, (
            f"Mismatch for {tool}: Expected {expected}, Got {edit_path}"
        )
