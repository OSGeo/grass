find_package(FLEX REQUIRED)

find_package(BISON REQUIRED)


find_package(GDAL REQUIRED)
add_library(GDAL INTERFACE IMPORTED GLOBAL)
set_property( TARGET GDAL PROPERTY INTERFACE_LINK_LIBRARIES ${GDAL_LIBRARY} )
set_property( TARGET GDAL PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${GDAL_INCLUDE_DIRS} )

find_package(PNG REQUIRED)
add_library(LIBPNG INTERFACE IMPORTED GLOBAL)
set_property( TARGET LIBPNG PROPERTY INTERFACE_LINK_LIBRARIES ${PNG_LIBRARY} )
set_property( TARGET LIBPNG PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${PNG_INCLUDE_DIR} )

find_package(JPEG)
if(JPEG_FOUND)
  add_library(LIBJPEG INTERFACE IMPORTED GLOBAL)
  set_property( TARGET LIBJPEG PROPERTY INTERFACE_LINK_LIBRARIES ${JPEG_LIBRARY} )
  set_property( TARGET LIBJPEG PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${JPEG_INCLUDE_DIR} )
endif()

find_package(ZLIB REQUIRED)
add_library(ZLIB INTERFACE IMPORTED GLOBAL)
set_property( TARGET ZLIB PROPERTY INTERFACE_LINK_LIBRARIES ${ZLIB_LIBRARY} )
set_property( TARGET ZLIB PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${ZLIB_INCLUDE_DIR} )

find_library(M_LIBRARY m)
add_library(LIBM INTERFACE IMPORTED GLOBAL)
set_property( TARGET LIBM PROPERTY INTERFACE_LINK_LIBRARIES ${M_LIBRARY} )

find_package(PROJ4 REQUIRED)
add_library(PROJ4 INTERFACE IMPORTED GLOBAL)
set_property( TARGET PROJ4 PROPERTY INTERFACE_LINK_LIBRARIES ${PROJ4_LIBRARY} )
set_property( TARGET PROJ4 PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${PROJ4_INCLUDE_DIR} )

find_package(Freetype REQUIRED)
add_library(FREETYPE INTERFACE IMPORTED GLOBAL)
set_property( TARGET FREETYPE PROPERTY INTERFACE_LINK_LIBRARIES ${FREETYPE_LIBRARY} )
set_property( TARGET FREETYPE PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${FREETYPE_INCLUDE_DIRS} )

find_package(FFTW REQUIRED)
if(FFTW_FOUND)
  add_library(FFTW INTERFACE IMPORTED GLOBAL)
  set_property(TARGET FFTW PROPERTY INTERFACE_LINK_LIBRARIES ${FFTW_LIBRARIES} )
  set_property(TARGET FFTW PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${FFTW_INCLUDE_DIR} )
endif()

if(WITH_CAIRO)
  find_package(Cairo REQUIRED)
  add_library(CAIRO INTERFACE IMPORTED GLOBAL)
  set_property( TARGET CAIRO PROPERTY INTERFACE_LINK_LIBRARIES ${CAIRO_LIBRARIES} )
  set_property( TARGET CAIRO PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${CAIRO_INCLUDE_DIRS} )
endif()

if(WITH_X11)
  find_package(X11 REQUIRED)
  add_library(X11 INTERFACE IMPORTED GLOBAL)
  set_property(TARGET X11 PROPERTY INTERFACE_LINK_LIBRARIES ${X11_LIBRARIES} )
  set_property(TARGET X11 PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${X11_INCLUDE_DIR}")

endif()

find_package(TIFF REQUIRED)
add_library(TIFF INTERFACE IMPORTED GLOBAL)
set_property(TARGET TIFF PROPERTY INTERFACE_LINK_LIBRARIES ${TIFF_LIBRARY} )
set_property(TARGET TIFF PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${TIFF_INCLUDE_DIR}")

find_package(Iconv)
if(ICONV_FOUND)
add_library(ICONV INTERFACE IMPORTED GLOBAL)
set_property(TARGET ICONV PROPERTY INTERFACE_LINK_LIBRARIES ${ICONV_LIBRARIES} )
set_property(TARGET ICONV PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${ICONV_INCLUDE_DIR}")
#if(ICONV_SECOND_ARGUMENT_IS_CONST)
#set() update this value in include/config.cmake.in
endif()

if(WITH_BZLIB)
find_package(BZip2)
if(BZIP2_FOUND)
add_library(BZIP2 INTERFACE IMPORTED GLOBAL)
set_property(TARGET BZIP2 PROPERTY INTERFACE_LINK_LIBRARIES ${BZIP2_LIBRARIES} )
set_property(TARGET BZIP2 PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${BZIP2_INCLUDE_DIR}")
endif()
endif()

if(WITH_BLAS)
find_package(BLAS)
if(BLAS_FOUND)
add_library(BLAS INTERFACE IMPORTED GLOBAL)
set_property(TARGET BLAS PROPERTY INTERFACE_LINK_LIBRARIES ${BLAS_LIBRARIES} )
#set_property(TARGET BZIP2 PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${BLAS_INCLUDE_DIR}")
endif()
endif()

if(WITH_LAPACK)
find_package(LAPACK)
if(LAPACK_FOUND)
add_library(LAPACK INTERFACE IMPORTED GLOBAL)
set_property(TARGET LAPACK PROPERTY INTERFACE_LINK_LIBRARIES ${LAPACK_LIBRARIES} )
#set_property(TARGET LAPACK PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${BLAS_INCLUDE_DIR}")
endif()
endif()


if(WITH_OPENGL)
  find_package(OpenGL REQUIRED)
  add_library(OPENGL INTERFACE IMPORTED GLOBAL)
  set_property(TARGET OPENGL PROPERTY INTERFACE_LINK_LIBRARIES ${OPENGL_LIBRARIES} )
  set_property(TARGET OPENGL PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${OPENGL_INCLUDE_DIR} )  
endif()

if(WITH_POSTGRES)
  find_package(PostgreSQL REQUIRED)
  add_library(POSTGRES INTERFACE IMPORTED GLOBAL)
  set_property(TARGET POSTGRES PROPERTY INTERFACE_LINK_LIBRARIES ${PostgreSQL_LIBRARIES} )
  set_property(TARGET POSTGRES PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${PostgreSQL_INCLUDE_DIRS} )
endif()


if(WITH_SQLITE)
  find_package(SQLite REQUIRED)
  add_library(SQLITE INTERFACE IMPORTED GLOBAL)
  set_property(TARGET SQLITE PROPERTY INTERFACE_LINK_LIBRARIES ${SQLITE_LIBRARY} )
  set_property(TARGET SQLITE PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${SQLITE_INCLUDE_DIR} )
endif()


find_package(GEOS REQUIRED)
add_library(GEOS INTERFACE IMPORTED GLOBAL)
set_property(TARGET GEOS PROPERTY INTERFACE_LINK_LIBRARIES ${GEOS_LIBRARIES} )
set_property(TARGET GEOS PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${GEOS_INCLUDE_DIR} )

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads)
if(Threads_FOUND)
  add_library(PTHREAD INTERFACE IMPORTED GLOBAL)
  if(THREADS_HAVE_PTHREAD_ARG)
    set_property(TARGET PTHREAD PROPERTY INTERFACE_COMPILE_OPTIONS "-pthread")
  endif()
  if(CMAKE_THREAD_LIBS_INIT)
    set_property(TARGET PTHREAD PROPERTY INTERFACE_LINK_LIBRARIES "${CMAKE_THREAD_LIBS_INIT}")
  endif()
endif()

#find_package (PythonLibs REQUIRED )

set(Python_ADDITIONAL_VERSIONS 3.5 3.6) #2.7 2.6 2.5)
find_package (PythonInterp REQUIRED )
#find_package ( Numpy )

# if (PYTHON_VERSION_MAJOR GREATER 2 )
#   message(FATAL_ERROR "cannot use python 3 or higher")
# endif()





# message("found gdal")

# if(TARGET LIB_GDAL)
#   message("GRASSLIB_DEPEND=LIB_GDAL")
#   get_target_property(VAR LIB_GDAL INTERFACE_INCLUDE_DIRECTORIES)
#   message("VAR=${VAR}")
# endif()

#$<TARGET_PROPERTY:LIB_GDAL,INTERFACE_INCLUDE_DIRECTORIES> 
#$<TARGET_PROPERTY:LIB_GDAL,INTERFACE_LINK_LIBRARIES> 



